---
export const prerender = true
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import PostBody from '../../components/PostBody.astro'
import PostDate from '../../components/PostDate.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import Layout from '../../layouts/Layout.astro'
import {
extractTargetBlocks,
filePath,
getPostLink,
} from '../../lib/blog-helpers'
import * as interfaces from '../../lib/interfaces'
import {
downloadFile,
getAllBlocksByBlockId,
getAllPosts,
getAllTags,
getBlock,
getPostBySlug,
getPosts,
getPostsByTag,
getRankedPosts,
} from '../../lib/notion/client'
// import styles from '../../styles/blog.module.css' // Styles migrated to Tailwind

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags?.[0]?.name || '', 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const imageOrFile = block.Image || block.File
      if (!imageOrFile?.File?.ExpiryTime) {
        return getBlock(block.Id)
      }
      const expiryTime = imageOrFile.File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File)?.File?.Url || '')
        } catch {
          console.log(
            'Invalid file URL: ',
            (block.Image || block.File)?.File?.Url
          )
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

// 自動生成に変更
let ogImage = ''
ogImage = new URL(`/og/${post.Slug}.png`, Astro.site).toString()

// cover image 追加
let pageCoverImage = ''
if (post.Cover && post.Cover.Url) {
  if (import.meta.env.DEV) {
    pageCoverImage = post.Cover.Url
  } else {
    pageCoverImage = new URL(filePath(new URL(post.Cover.Url)), Astro.site).toString()
  }
}
---

<Layout
  title={post.Title}
  description={post.Excerpt || ''}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
  pageCoverImage={pageCoverImage}
>
  <div slot="main" class=""> {/* Removed styles.main */}
    <header class="pb-5"> {/* Added header with pb-5 for .main header styles */}
      <PostDate post={post} />
      <PostTags post={post} enableLink={false} />
      <PostTitle post={post} enableLink={false} />
    </header>
    <div class="mx-auto mb-10"> {/* Removed styles.post, added mx-auto mb-10 */}
      <PostBody blocks={blocks} />
      <PostTags post={post} enableLink={false}/>

      <footer class="mt-2 p-0 border-0"> {/* Added mt-2 p-0 border-0 for .post footer styles */}
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div slot="aside" class="aside">
    <BlogPostsLink
      heading="Posts in the same category"
      posts={postsHavingSameTag.filter(
        (p: interfaces.Post) => p.Slug !== post.Slug
      )}
    />
    <BlogPostsLink heading="Latest posts" posts={recentPosts} />
    <BlogTagsLink heading="Categories" tags={tags} />
  </div>
</Layout>
