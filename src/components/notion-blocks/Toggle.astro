---
import * as interfaces from '../../lib/interfaces.ts'
import { snakeToKebab } from '../../lib/style-helpers.ts'
import RichText from './RichText.astro'
import NotionBlocks from '../NotionBlocks.astro'
// import '../../styles/notion-color.css' // Removed import

export interface Props {
  block: interfaces.Block
  headings: interfaces.Block[]
}

const { block, headings } = Astro.props

const notionColorToTailwindText: { [key: string]: string } = {
  default: '',
  gray: 'text-[rgba(120,119,116,1)]',
  brown: 'text-[rgba(159,107,83,1)]',
  orange: 'text-[rgba(217,115,13,1)]',
  yellow: 'text-[rgba(203,145,47,1)]',
  green: 'text-[rgba(68,131,97,1)]',
  blue: 'text-[rgba(51,126,169,1)]',
  purple: 'text-[rgba(144,101,176,1)]',
  pink: 'text-[rgba(193,76,138,1)]',
  red: 'text-[rgba(212,76,71,1)]',
}

const toggleBaseClasses = "p-[0.4rem]"
const summaryBaseClasses = "cursor-pointer"
// The rule .toggle > summary > a { display: inline; } is default behavior for <a>, so no specific class needed unless it was overriding something.
const contentDivClasses = "ml-[1em]"

const colorKey = snakeToKebab(block.Toggle.Color)
const colorClass = notionColorToTailwindText[colorKey] || ''

---

<details class={`toggle ${toggleBaseClasses} ${colorClass}`}>
  <summary class={summaryBaseClasses}>
    {
      block.Toggle.RichTexts.map((richText: interfaces.RichText) => (
        <RichText richText={richText} />
      ))
    }
  </summary>
  <div class={contentDivClasses}>
    <NotionBlocks blocks={block.Toggle.Children} headings={headings} />
  </div>
</details>
<!-- Style tag removed as its content is migrated to Tailwind classes -->
