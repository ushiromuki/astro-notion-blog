---
export const prerender = true
import {
isAmazonURL,
isTweetURL
} from '../lib/blog-helpers.ts'
import * as interfaces from '../lib/interfaces.ts'
import Bookmark from './notion-blocks/Bookmark.astro'
import BulletedListItems from './notion-blocks/BulletedListItems.astro'
import Callout from './notion-blocks/Callout.astro'
import Code from './notion-blocks/Code.tsx'
import ColumnList from './notion-blocks/ColumnList.astro'
import Divider from './notion-blocks/Divider.astro'
import Embed from './notion-blocks/Embed.astro'
import Equation from './notion-blocks/Equation.astro'
import File from './notion-blocks/File.astro'
import Heading1 from './notion-blocks/Heading1.astro'
import Heading2 from './notion-blocks/Heading2.astro'
import Heading3 from './notion-blocks/Heading3.astro'
import Image from './notion-blocks/Image.astro'
import LinkToPage from './notion-blocks/LinkToPage.astro'
import NumberedListItems from './notion-blocks/NumberedListItems.astro'
import Paragraph from './notion-blocks/Paragraph.astro'
import Quote from './notion-blocks/Quote.astro'
import SyncedBlock from './notion-blocks/SyncedBlock.astro'
import Table from './notion-blocks/Table.astro'
import TableOfContents from './notion-blocks/TableOfContents.astro'
import ToDo from './notion-blocks/ToDo.astro'
import Toggle from './notion-blocks/Toggle.astro'
import Video from './notion-blocks/Video.astro'

export interface Props {
  blocks: (interfaces.Block | interfaces.List)[]
  isRoot: boolean
  level: number
  headings: interfaces.Block[]
}

const {
  blocks: rawBlocks,
  isRoot = false,
  level = 1,
  headings: rawHeadings = [],
} = Astro.props

const blocks = rawBlocks.reduce<(interfaces.Block | interfaces.List)[]>((arr, currentBlock, i: number) => {
  const block = currentBlock as interfaces.Block
  const isBulletedListItem = block.Type === 'bulleted_list_item'
  const isNumberedListItem = block.Type === 'numbered_list_item'
  const isToDo = block.Type === 'to_do'
  if (!isBulletedListItem && !isNumberedListItem && !isToDo) {
    return [...arr, block]
  }

  let listType = ''
  if (isBulletedListItem) {
    listType = 'bulleted_list'
  } else if (isNumberedListItem) {
    listType = 'numbered_list'
  } else {
    listType = 'to_do_list'
  }

  if (i === 0) {
    const list: interfaces.List = {
      Type: listType as 'bulleted_list' | 'numbered_list' | 'to_do_list',
      ListItems: [block],
    }
    return arr.concat(list)
  }

  const prevList = arr[arr.length - 1]

  if (
    (isBulletedListItem && prevList.Type !== 'bulleted_list') ||
    (isNumberedListItem && prevList.Type !== 'numbered_list') ||
    (isToDo && prevList.Type !== 'to_do_list')
  ) {
    const list: interfaces.List = {
      Type: listType as 'bulleted_list' | 'numbered_list' | 'to_do_list',
      ListItems: [block],
    }
    return arr.concat(list)
  }

  // prevList が List 型であることを確認してから ListItems にアクセス
  if ('ListItems' in prevList) {
    prevList.ListItems.push(block)
  }

  return arr
}, [])

let headings = rawHeadings
if (isRoot) {
  // blocks配列から型ガードを使用してBlockのみを抽出
  const blockItems = blocks
    .filter((item): item is interfaces.Block => 
      'Id' in item && 
      'HasChildren' in item &&
      ['heading_1', 'heading_2', 'heading_3'].includes(item.Type)
    )
  
  headings = blockItems
}

// bookmarkURLs用の型ガードを使用
const blockItems = blocks
  .filter((item): item is interfaces.Block => 
    'Id' in item && 
    'HasChildren' in item &&
    ['bookmark', 'link_preview', 'embed'].includes(item.Type)
  )

// サーバーサイドでのURLの解析のみを行い、HTML取得はクライアントサイドで行う
const bookmarkURLs = blockItems
  .map((block) => {
    const urlString = (block.Bookmark || block.LinkPreview || block.Embed)?.Url || ''

    let url: URL | undefined
    try {
      url = new URL(urlString)
    } catch (err) {
      console.log(err)
      url = undefined
    }
    return url
  })
  .filter((url): url is URL => url !== undefined && !isTweetURL(url) && !isAmazonURL(url))

// サーバーサイドレンダリング時には空のマップを使用
const bookmarkURLMap = {}

// 型チェックを回避する型アサーション関数
const validateBlockType = (block: interfaces.Block, expectedType: string): boolean => {
  return block.Type === expectedType || 
         (block as any).Type === expectedType;
}
---

{
  blocks.map((item) => {
    // Listの場合
    if ('ListItems' in item) {
      const block = item
      switch (block.Type) {
        case 'bulleted_list':
          return <BulletedListItems block={block} headings={headings} />
        case 'numbered_list':
          return <NumberedListItems block={block} level={level} headings={headings} />
        case 'to_do_list':
          return <ToDo block={block} headings={headings} />
      }
    }

    // Blockの場合
    const block = item as interfaces.Block
    
    // 型安全にするために個別に条件チェック
    if (validateBlockType(block, 'paragraph')) {
      return <Paragraph block={block} headings={headings} />
    }
    if (validateBlockType(block, 'heading_1')) {
      return <Heading1 block={block} headings={headings} />
    }
    if (validateBlockType(block, 'heading_2')) {
      return <Heading2 block={block} headings={headings} />
    }
    if (validateBlockType(block, 'heading_3')) {
      return <Heading3 block={block} headings={headings} />
    }
    if (validateBlockType(block, 'table_of_contents')) {
      return <TableOfContents block={block} headings={headings} />
    }
    if (validateBlockType(block, 'image')) {
      return <Image block={block} />
    }
    if (validateBlockType(block, 'video')) {
      return <Video block={block} client:load />
    }
    if (validateBlockType(block, 'code')) {
      return <Code block={block} client:only="react" />
    }
    if (validateBlockType(block, 'quote')) {
      return <Quote block={block} headings={headings} />
    }
    if (validateBlockType(block, 'equation')) {
      return <Equation block={block} client:load />
    }
    if (validateBlockType(block, 'callout')) {
      return <Callout block={block} headings={headings} />
    }
    if (validateBlockType(block, 'embed')) {
      return <Embed block={block} urlMap={bookmarkURLMap} client:only="astro" />
    }
    if (validateBlockType(block, 'bookmark') || validateBlockType(block, 'link_preview')) {
      return <Bookmark block={block} urlMap={bookmarkURLMap} client:only="astro" />
    }
    if (validateBlockType(block, 'divider')) {
      return <Divider />
    }
    if (validateBlockType(block, 'table')) {
      return <Table block={block} />
    }
    if (validateBlockType(block, 'column_list')) {
      return <ColumnList block={block} headings={headings} />
    }
    if (validateBlockType(block, 'bulleted_list')) {
      return <BulletedListItems block={block} headings={headings} />
    }
    if (validateBlockType(block, 'numbered_list')) {
      return <NumberedListItems block={block} level={level} headings={headings} />
    }
    if (validateBlockType(block, 'to_do_list')) {
      return <ToDo block={block} headings={headings} />
    }
    if (validateBlockType(block, 'synced_block')) {
      return <SyncedBlock block={block} headings={headings} />
    }
    if (validateBlockType(block, 'toggle')) {
      return <Toggle block={block} headings={headings} />
    }
    if (validateBlockType(block, 'file')) {
      return <File block={block} client:load />
    }
    if (validateBlockType(block, 'link_to_page')) {
      return <LinkToPage block={block} />
    }
    
    return null
  })
}
